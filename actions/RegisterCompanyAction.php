<?php

namespace app\actions;


use app\models\CompanyInfo;
use app\models\Users;
use Yii;
use yii\base\Action;
use yii\base\Component;
use yii\base\Model;
use yii\web\Response;

class RegisterCompanyAction extends Action
{
    /**
     * @var Users Аттрибут для users
     */
    private $user;
    /**
     * @var CompanyInfo Аттрибут для Company
     */
    private $companyInfo;
    /*
     * Аттрибут для ошибки например $this->error = 'не удачно'
     */
    private $_error;
    /*
     * Аттрибут для удачного запроса например $this->success = 'удачно";
     */
    private $_success;

    /**
     * названые сесси
     */
    const Session = 'register_company';
    /*
     * почта сервера
     */

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->user = new Users();
        $this->companyInfo = new CompanyInfo();
    }

    /**
     * @return bool До исползованые главную функцию проверка
     */

    public function beforeRun()
    {
        parent::beforeRun(); // TODO: Change the autogenerated stub
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (Yii::$app->request->isAjax && Yii::$app->request->post()){return true;}
        if (Yii::$app->session->has(self::Session)){return true;}
        return false;
    }

    /**
     * @return mixed данная функция главное для исползованые
     *
     */

    public function run(){
            $this->sesionUpdate();
            return $this->dataSave();
    }

    /**
     * @return mixed данная функция сохранает данные
     */


    public function dataSave(){
        if(!$this->UserSave()){
            $this->success = false;
            $this->error = $this->user->errors;
            return $this->message;

        }
        if(!$this->CompanySave()){
            $this->success = false;
            $this->error = $this->companyInfo->errors;
            return $this->message;

        }
        if(!$this->sendMailer()){
            $this->success = false;
            $this->error = t('не удачно отправилась писмо на почту');
            return $this->message;
        }
        $this->success = true;
        return $this->message;
    }

    /**
     *  данная функция просто удалает и помешает массив на сессию
     */
    public function sesionUpdate(){
        unset($_SESSION[self::Session]['payment_type']);
        $payment = ['payment_type' => Yii::$app->request->post('payment')];
        Yii::$app->session->set(self::Session, array_merge($payment, Yii::$app->session->get(self::Session)));
    }

    /**
     * @return mixed данная функция сохранает данные на Users таблитцу
     */
    public function UserSave(){
        $this->user->setPassword($this->password);
        $this->user->generatePasswordResetToken();
        $this->user->setAttributes($this->session);
        return $this->user->save();

    }

    /**
     * для работы с паролем и логином для пользователя
     */
    public function sendMailer(){
          return $this->user->sendToEmailPasswordResetToken();
    }

    /**
     * данная функция сохранает данные CompanyInfo
     */
    public function CompanySave(){
        $this->companyInfo->user_id = $this->user->id;
        $this->companyInfo->setAttributes($this->session);
        $this->removeSession;
        return $this->companyInfo->save();
    }

    /**
     * @return mixed данный геттер удалает сессию
     */
    public function getRemoveSession(){
       return Yii::$app->session->remove(self::Session);
    }

    /**
     * @return mixed
     */
    public function getLogin(){
        return $this->session['username'];
    }
    /**
     * @return string
     * @throws \yii\base\Exception
     */

    public function getPassword(){
        $length = 10;
        $chars = array_merge(range(0,9), range('a','z'), range('A','Z'));
        shuffle($chars);
        return  $password = implode(array_slice($chars, 0, $length));
    }
    /**
     * @return mixed
     */
    public function getSession(){
        return \Yii::$app->session[self::Session];
    }

    /**
     * @return mixed
     */
    public function getError(){
        return $this->_error;
    }

    /**
     * @param $value
     * @return mixed
     */
    public function setError($value){
        return $this->_error = $value;
    }

    /**
     * @return mixed
     */
    public function getSuccess(){
        return $this->_success;
    }

    /**
     * @param $value
     * @return mixed
     */
    public function setSuccess($value){
        return $this->_success = $value;
    }

    /**
     * @return array
     */
    public function getMessage(){
        return [
            'success'=>$this->success,
            'error'=>$this->error,
        ];
    }

}